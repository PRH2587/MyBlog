<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.bomb.dao.UserMessageMapper" >
  <resultMap id="BaseResultMap" type="com.bomb.model.UserMessage" >
    <id column="id" property="id" jdbcType="CHAR" />
    <result column="image_path" property="imagePath" jdbcType="VARCHAR" />
    <result column="message" property="message" jdbcType="VARCHAR" />
    <result column="time" property="time" jdbcType="TIMESTAMP" />
    <result column="blog_id" property="blogId" jdbcType="INTEGER" />
    <result column="user_id" property="userId" jdbcType="INTEGER" />
    <association property="username" javaType="com.bomb.model.User" resultMap="UserNameResultMap"/>
  </resultMap>
  
  <resultMap id="UserNameResultMap" type="com.bomb.model.User">
		<id column="id" property="id" jdbcType="CHAR" />
		<result column="name" property="name" jdbcType="VARCHAR" />
		<result column="nickname" property="nickname" jdbcType="VARCHAR" />
		<result column="password" property="password" jdbcType="VARCHAR" />
		<result column="user_id" property="userId" jdbcType="INTEGER" />
	</resultMap>
	
	<select id="getMesUserNameByUser" parameterType="java.lang.Integer"
		resultMap="BaseResultMap">
		select
		UM.id id,
		UM.image_path image_path,
		UM.message message,
		UM.time time,
		UM.user_id user_id,
		U.nickname nickname
		from net_user_message UM left outer join net_user U on
		UM.user_id = U.user_id
		where UM.user_id =
		#{user_id,jdbcType=CHAR}
	</select>
	
	
	
	
	
	
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, image_path, message, time, blog_id, user_id
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.bomb.model.UserMessageExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from net_user_message
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select 
    <include refid="Base_Column_List" />
    from net_user_message
    where id = #{id,jdbcType=CHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String" >
    delete from net_user_message
    where id = #{id,jdbcType=CHAR}
  </delete>
  <insert id="insert" parameterType="com.bomb.model.UserMessage" >
    insert into net_user_message (id, image_path, message, 
      time, blog_id, user_id
      )
    values (#{id,jdbcType=CHAR}, #{imagePath,jdbcType=VARCHAR}, #{message,jdbcType=VARCHAR}, 
      #{time,jdbcType=TIMESTAMP}, #{blogId,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.bomb.model.UserMessage" >
    insert into net_user_message
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="imagePath != null" >
        image_path,
      </if>
      <if test="message != null" >
        message,
      </if>
      <if test="time != null" >
        time,
      </if>
      <if test="blogId != null" >
        blog_id,
      </if>
      <if test="userId != null" >
        user_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=CHAR},
      </if>
      <if test="imagePath != null" >
        #{imagePath,jdbcType=VARCHAR},
      </if>
      <if test="message != null" >
        #{message,jdbcType=VARCHAR},
      </if>
      <if test="time != null" >
        #{time,jdbcType=TIMESTAMP},
      </if>
      <if test="blogId != null" >
        #{blogId,jdbcType=INTEGER},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.bomb.model.UserMessage" >
    update net_user_message
    <set >
      <if test="imagePath != null" >
        image_path = #{imagePath,jdbcType=VARCHAR},
      </if>
      <if test="message != null" >
        message = #{message,jdbcType=VARCHAR},
      </if>
      <if test="time != null" >
        time = #{time,jdbcType=TIMESTAMP},
      </if>
      <if test="blogId != null" >
        blog_id = #{blogId,jdbcType=INTEGER},
      </if>
      <if test="userId != null" >
        user_id = #{userId,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=CHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.bomb.model.UserMessage" >
    update net_user_message
    set image_path = #{imagePath,jdbcType=VARCHAR},
      message = #{message,jdbcType=VARCHAR},
      time = #{time,jdbcType=TIMESTAMP},
      blog_id = #{blogId,jdbcType=INTEGER},
      user_id = #{userId,jdbcType=INTEGER}
    where id = #{id,jdbcType=CHAR}
  </update>
</mapper>